/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package info5100.university.example.UI.FacultyJFrame;

import info5100.university.example.CourseCatalog.Course;
import info5100.university.example.CourseCatalog.CourseOffer;
import info5100.university.example.CourseCatalog.CourseSchedule;
import info5100.university.example.Persona.Faculty.FacultyProfile;
import info5100.university.example.Platform.Platform;
import info5100.university.example.Role.UserAccount;
import static info5100.university.example.UI.StudentWorkArea.TranscriptJPanel.isValidrate;
import java.util.ArrayList;
import java.util.Map;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Ma2017
 */
public class CourseMgtJPanel extends javax.swing.JPanel {

    /**
     * Creates new form CourseMgtJPanel
     */
    private Platform pf;
    private UserAccount ua;
    private FacultyProfile fp;
    DefaultTableModel courseTableModel;
    DefaultTableModel scheduleTableModel;

    public CourseMgtJPanel(Platform pf, UserAccount useraccount) {
        initComponents();
        this.setVisible(true);
        this.pf = pf;
        this.ua = useraccount;
        this.fp = this.pf.getFacultydirectory().findProfessorById(ua.getAccountId());

        this.courseTableModel = (DefaultTableModel) courseTable.getModel();
        this.scheduleTableModel = (DefaultTableModel) scheduleTable.getModel();
        populateCourseIdCombo();
        populateCourse();
        populateSchedule();
    }

    public CourseMgtJPanel() {
        initComponents();
    }

    public void populateCourse() {
        courseTableModel.setRowCount(0);

        for (Course c : this.fp.getCourseCatalog().getCourses()) {
            Object[] row = new Object[6];

            row[0] = c;
            row[1] = c.getName();
            row[2] = c.getTopic();
            row[3] = c.getRegion();
            row[4] = c.getLanguage();
            row[5] = c.getPrice();

            courseTableModel.addRow(row);
        }
    }

    public void populateSchedule() {
        scheduleTableModel.setRowCount(0);

        for (Map.Entry<String, CourseSchedule> termSchedule : this.fp.getAllSchedules().entrySet()) {
            CourseSchedule cs = termSchedule.getValue();
            ArrayList<CourseOffer> offers = cs.getSchedule();

            for (CourseOffer co : offers) {
                Course c = co.getCourse();
                Object[] row = new Object[5];

                row[0] = c;//term
                row[1] = c.getName();
                row[2] = cs.getTerm();
                row[3] = co.getProfessor().getPerson().getNameOfPerson();
                row[4] = co.getSeatlist().size();

                scheduleTableModel.addRow(row);
            }

        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        fieldTopic = new javax.swing.JTextField();
        fieldRegion = new javax.swing.JTextField();
        fieldLang = new javax.swing.JTextField();
        fieldSeats = new javax.swing.JTextField();
        fieldCourseName = new javax.swing.JTextField();
        createCourseBtn = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        fieldPrice = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        comboTerm = new javax.swing.JComboBox<>();
        createCOBtn = new javax.swing.JButton();
        comboCourseId = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        courseTable = new javax.swing.JTable();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        scheduleTable = new javax.swing.JTable();
        jLabel10 = new javax.swing.JLabel();
        fieldUpdate = new javax.swing.JTextField();
        updatePriceBtn = new javax.swing.JButton();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        deleteCOBtn = new javax.swing.JButton();
        updateSeatBtn = new javax.swing.JButton();
        createCourseBtn1 = new javax.swing.JButton();
        DeleteCourseBtn = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox<>();
        jLabel11 = new javax.swing.JLabel();
        newSeat = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(153, 255, 153));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setText("Price");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 70, -1, -1));

        jLabel2.setText("Course Name");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 40, -1, -1));

        jLabel3.setText("Topic");
        add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 70, -1, -1));

        jLabel4.setText("Region");
        add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 40, -1, -1));

        jLabel5.setText("Language");
        add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 40, -1, -1));
        add(fieldTopic, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 70, 100, -1));
        add(fieldRegion, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 40, 100, -1));
        add(fieldLang, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 40, 100, -1));

        fieldSeats.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                fieldSeatsFocusLost(evt);
            }
        });
        add(fieldSeats, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 420, 200, -1));
        add(fieldCourseName, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 40, 100, -1));

        createCourseBtn.setText("Create Course");
        createCourseBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createCourseBtnActionPerformed(evt);
            }
        });
        add(createCourseBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 150, -1, -1));

        jLabel7.setText("term");
        add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 340, -1, -1));

        fieldPrice.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                fieldPriceFocusLost(evt);
            }
        });
        add(fieldPrice, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 70, 100, -1));

        jLabel8.setText("Course Id");
        add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 380, -1, -1));

        jLabel9.setText("Number of seats");
        add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 420, -1, -1));

        comboTerm.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "2022Fall", "2023Spring", "2023Summer" }));
        comboTerm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboTermActionPerformed(evt);
            }
        });
        add(comboTerm, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 340, 200, -1));

        createCOBtn.setText("Create Course Offer");
        createCOBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createCOBtnActionPerformed(evt);
            }
        });
        add(createCOBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 480, 160, -1));

        add(comboCourseId, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 380, 200, -1));

        courseTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Course ID", "Course Name", "Topic", "Region", "Language", "Price"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        courseTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                courseTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(courseTable);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 140, 520, 140));

        jLabel6.setText("My Courses");
        add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 120, -1, -1));

        scheduleTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Course ID", "Course Name", "Term", "Professor Name", "No. of seats"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane2.setViewportView(scheduleTable);

        add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 350, 460, 230));

        jLabel10.setText("My Course Schedule");
        add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 320, -1, -1));
        add(fieldUpdate, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 250, 110, -1));

        updatePriceBtn.setText("Update");
        updatePriceBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updatePriceBtnActionPerformed(evt);
            }
        });
        add(updatePriceBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 250, 120, -1));

        jLabel12.setFont(new java.awt.Font("Microsoft YaHei UI", 0, 10)); // NOI18N
        jLabel12.setText("（1--200）");
        add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 550, 80, -1));

        jLabel13.setFont(new java.awt.Font("Microsoft YaHei UI", 0, 10)); // NOI18N
        jLabel13.setText("（1--10000）");
        add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 90, 80, -1));

        deleteCOBtn.setText("Delete Course Offer");
        deleteCOBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteCOBtnActionPerformed(evt);
            }
        });
        add(deleteCOBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 480, 160, -1));

        updateSeatBtn.setText("Update number of seats");
        updateSeatBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateSeatBtnActionPerformed(evt);
            }
        });
        add(updateSeatBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 520, 160, -1));

        createCourseBtn1.setText("Create Course");
        createCourseBtn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createCourseBtn1ActionPerformed(evt);
            }
        });
        add(createCourseBtn1, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 150, -1, -1));

        DeleteCourseBtn.setText("Delete Course");
        DeleteCourseBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteCourseBtnActionPerformed(evt);
            }
        });
        add(DeleteCourseBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 150, -1, -1));

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Course Name", "Topic", "Region", "Price", "Language" }));
        add(jComboBox1, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 220, 120, -1));

        jLabel11.setText("update content:");
        add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 220, 100, -1));
        add(newSeat, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 520, 160, -1));

        jLabel14.setFont(new java.awt.Font("Microsoft YaHei UI", 0, 10)); // NOI18N
        jLabel14.setText("（1--200）");
        add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 440, 80, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void createCourseBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createCourseBtnActionPerformed
        // TODO add your handling code here:
        if (fieldCourseName.getText().isEmpty() || fieldTopic.getText().isEmpty() || fieldRegion.getText().isEmpty() || fieldLang.getText().isEmpty() || fieldPrice.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "please fill in all field");
        } else {
            if (isValidPrice(fieldPrice)) {
                String name = fieldCourseName.getText();
                String topic = fieldTopic.getText();
                String region = fieldRegion.getText();
                String lang = fieldLang.getText();
                String price = fieldPrice.getText();
                Boolean exist = false;

                for (FacultyProfile f : this.pf.getFacultydirectory().getProfessors()) {
                    if (f.getCourseCatalog().isCourseAlreadyExist(name)) {
                        exist = true;
                        JOptionPane.showMessageDialog(null, "The course is already existed!");
                    }
                }

                if (!exist) {
                    this.fp.createCourse(name, topic, region, lang, Integer.valueOf(price), fp.getPerson().getNameOfPerson());
                }
                //        JOptionPane.showMessageDialog(null,"Created");
                populateCourse();
                populateCourseIdCombo();
            } else {
                JOptionPane.showMessageDialog(null, "The price is out of range!");
            }
        }
    }//GEN-LAST:event_createCourseBtnActionPerformed

    private void comboTermActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboTermActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboTermActionPerformed

    private void createCOBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createCOBtnActionPerformed
        // TODO add your handling code here:
        String courseId = (String) comboCourseId.getSelectedItem();
        String seats = fieldSeats.getText();
        String term = (String) comboTerm.getSelectedItem();
        CourseSchedule courseSchedle;

        if (isValidSeats(fieldSeats)) {
            if (this.fp.getCourseScheduleByTerm(term) != null) {
                courseSchedle = this.fp.getCourseScheduleByTerm(term);
                if (courseSchedle.isThisCourseOfferExist(courseId)) {
                    JOptionPane.showMessageDialog(null, "You have already create this courseOffer for this semester");
                } else {
                    CourseOffer co = this.fp.createCourseOffer(term, courseId);
                    co.setTerm(term);
                    co.generatSeats(Integer.valueOf(seats));
                }

            } else {
                CourseSchedule cs = this.fp.newCourseSchedule(term);
                CourseOffer co = this.fp.createCourseOffer(term, courseId);
                co.setTerm(term);
                co.generatSeats(Integer.valueOf(seats));
            }

            populateSchedule();
        } else {
            JOptionPane.showMessageDialog(null, "The seat is out of range!");
        }


    }//GEN-LAST:event_createCOBtnActionPerformed

    private void courseTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_courseTableMouseClicked
        // TODO add your handling code here:
        int selectedRow = courseTable.getSelectedRow();
        Course c = (Course) courseTable.getValueAt(selectedRow, 0);
    }//GEN-LAST:event_courseTableMouseClicked

    private void updatePriceBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updatePriceBtnActionPerformed
        String keyword = fieldUpdate.getText();
        int selectedRow = courseTable.getSelectedRow();
        Course c = (Course) courseTable.getValueAt(selectedRow, 0);
        if (fieldUpdate.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Please fill the text");

        } else {

            if (selectedRow >= 0) {
                if (jComboBox1.getSelectedItem().equals("Course Name")) {
                    if (this.fp.getCourseCatalog().isCourseAlreadyExist(keyword)) {
                        JOptionPane.showMessageDialog(null, "You have already create this course");
                    } else {
                        c.setName(keyword);
                        populateCourse();
                    }

                } else if (jComboBox1.getSelectedItem().equals("Topic")) {
                    c.setTopic(keyword);
                    populateCourse();

                } else if (jComboBox1.getSelectedItem().equals("Region")) {
                    c.setRegion(keyword);
                    populateCourse();

                } else if (jComboBox1.getSelectedItem().equals("Price")) {
                    if (isValidPrice(fieldUpdate)) {
                        c.setPrice(Integer.valueOf(keyword));
                        populateCourse();
                    } else {
                        JOptionPane.showMessageDialog(null, "The price is out of range!");
                    }

                } else if (jComboBox1.getSelectedItem().equals("Language")) {
                    c.setLanguage(keyword);
                    populateCourse();
                }
            } else {
                JOptionPane.showMessageDialog(null, "Please choose a course");
            }

        }
    }//GEN-LAST:event_updatePriceBtnActionPerformed

    private void fieldPriceFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_fieldPriceFocusLost
//        // TODO add your handling code here:
//        if (isValidPrice(fieldPrice)) {
//            //pass
//        } else {
//            JOptionPane.showMessageDialog(null, "The price is out of range!");
//        }
    }//GEN-LAST:event_fieldPriceFocusLost

    private void fieldSeatsFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_fieldSeatsFocusLost

    }//GEN-LAST:event_fieldSeatsFocusLost

    private void deleteCOBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteCOBtnActionPerformed
        int selectedRow = scheduleTable.getSelectedRow();
        Course c = (Course) scheduleTable.getValueAt(selectedRow, 0);
        String term = (String) scheduleTable.getValueAt(selectedRow, 2);
        this.fp.deleteCourseOffer(term, c.getCourseId());
        populateSchedule();
    }//GEN-LAST:event_deleteCOBtnActionPerformed

    private void updateSeatBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateSeatBtnActionPerformed
        String keyword = newSeat.getText();
        int selectedRow = scheduleTable.getSelectedRow();
        String term = (String) scheduleTable.getValueAt(selectedRow, 2);
        Course c = (Course) scheduleTable.getValueAt(selectedRow, 0);

        if (selectedRow >= 0) {
            if (isValidSeats(newSeat)) {
                CourseOffer co = this.fp.getAllSchedules().get(term).getCourseOfferByCourseId(c.getCourseId());
                co.changeSeatsNumbers(Integer.valueOf(keyword));
                populateSchedule();
            } else {
                JOptionPane.showMessageDialog(null, "The seat is out of range!");
            }

        } else {
            JOptionPane.showMessageDialog(null, "Please choose a course");
        }
    }//GEN-LAST:event_updateSeatBtnActionPerformed

    private void createCourseBtn1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createCourseBtn1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_createCourseBtn1ActionPerformed

    private void DeleteCourseBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteCourseBtnActionPerformed
        int selectedRow = courseTable.getSelectedRow();
        Course c = (Course) courseTable.getValueAt(selectedRow, 0);
        this.fp.getCourseCatalog().deleteCourse(c);
        populateCourse();
        populateCourseIdCombo();

    }//GEN-LAST:event_DeleteCourseBtnActionPerformed

    public static boolean isValidPrice(JTextField textField) {
        String input = textField.getText();
        try {
            int number = Integer.parseInt(input);
            if (number >= 1 && number <= 10000) {
                // Input is valid, between 1 and 10
                return true;
            } else {
                // Input is not between 1 and 10
                return false;
            }
        } catch (NumberFormatException e) {
            // Input is not a valid double
            return false;
        }
    }

    public static boolean isValidSeats(JTextField textField) {
        String input = textField.getText();
        try {
            int number = Integer.parseInt(input);
            if (number >= 1 && number <= 200) {
                // Input is valid, between 1 and 10
                return true;
            } else {
                // Input is not between 1 and 10
                return false;
            }
        } catch (NumberFormatException e) {
            // Input is not a valid double
            return false;
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton DeleteCourseBtn;
    private javax.swing.JComboBox<String> comboCourseId;
    private javax.swing.JComboBox<String> comboTerm;
    private javax.swing.JTable courseTable;
    private javax.swing.JButton createCOBtn;
    private javax.swing.JButton createCourseBtn;
    private javax.swing.JButton createCourseBtn1;
    private javax.swing.JButton deleteCOBtn;
    private javax.swing.JTextField fieldCourseName;
    private javax.swing.JTextField fieldLang;
    private javax.swing.JTextField fieldPrice;
    private javax.swing.JTextField fieldRegion;
    private javax.swing.JTextField fieldSeats;
    private javax.swing.JTextField fieldTopic;
    private javax.swing.JTextField fieldUpdate;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField newSeat;
    private javax.swing.JTable scheduleTable;
    private javax.swing.JButton updatePriceBtn;
    private javax.swing.JButton updateSeatBtn;
    // End of variables declaration//GEN-END:variables

    public void populateCourseIdCombo() {
        comboCourseId.removeAllItems();

        for (Course c : this.pf.getFacultydirectory().findProfessorById(ua.getAccountId()).getCourseCatalog().getCourses()) {
            comboCourseId.addItem(c.getCourseId());
        }
    }
}
